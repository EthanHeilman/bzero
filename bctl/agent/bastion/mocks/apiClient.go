// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	bytes "bytes"
	context "context"

	mock "github.com/stretchr/testify/mock"

	rsa "crypto/rsa"

	splitclient "github.com/bastionzero/go-toolkit/certificate/splitclient"
)

// MockApiClient is an autogenerated mock type for the MockApiClient type
type MockApiClient struct {
	mock.Mock
}

// CosignCertificate provides a mock function with given fields: targetUser, clientCert, clientPubKey, keyShardHash
func (_m *MockApiClient) CosignCertificate(targetUser string, clientCert *splitclient.SplitClientCertificate, clientPubKey rsa.PublicKey, keyShardHash string) (*splitclient.SplitClientCertificate, error) {
	ret := _m.Called(targetUser, clientCert, clientPubKey, keyShardHash)

	var r0 *splitclient.SplitClientCertificate
	if rf, ok := ret.Get(0).(func(string, *splitclient.SplitClientCertificate, rsa.PublicKey, string) *splitclient.SplitClientCertificate); ok {
		r0 = rf(targetUser, clientCert, clientPubKey, keyShardHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*splitclient.SplitClientCertificate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *splitclient.SplitClientCertificate, rsa.PublicKey, string) error); ok {
		r1 = rf(targetUser, clientCert, clientPubKey, keyShardHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportError provides a mock function with given fields: ctx, reporter, reportErr, state
func (_m *MockApiClient) ReportError(ctx context.Context, reporter string, reportErr error, state interface{}) error {
	ret := _m.Called(ctx, reporter, reportErr, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, error, interface{}) error); ok {
		r0 = rf(ctx, reporter, reportErr, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReportLogs provides a mock function with given fields: ctx, logs, formDataContentType
func (_m *MockApiClient) ReportLogs(ctx context.Context, logs *bytes.Buffer, formDataContentType string) error {
	ret := _m.Called(ctx, logs, formDataContentType)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *bytes.Buffer, string) error); ok {
		r0 = rf(ctx, logs, formDataContentType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReportRestart provides a mock function with given fields: ctx, targetId, pubKey, reason, state
func (_m *MockApiClient) ReportRestart(ctx context.Context, targetId string, pubKey string, reason string, state interface{}) error {
	ret := _m.Called(ctx, targetId, pubKey, reason, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, interface{}) error); ok {
		r0 = rf(ctx, targetId, pubKey, reason, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockApiClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockApiClient creates a new instance of MockApiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockApiClient(t mockConstructorTestingTNewMockApiClient) *MockApiClient {
	mock := &MockApiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
