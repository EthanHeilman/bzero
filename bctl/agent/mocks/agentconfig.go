// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	keypair "bastionzero.com/bzerolib/keypair"
	mock "github.com/stretchr/testify/mock"
)

// AgentConfig is an autogenerated mock type for the AgentConfig type
type AgentConfig struct {
	mock.Mock
}

// GetAgentIdentityToken provides a mock function with given fields:
func (_m *AgentConfig) GetAgentIdentityToken() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetIdpOrgId provides a mock function with given fields:
func (_m *AgentConfig) GetIdpOrgId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetIdpProvider provides a mock function with given fields:
func (_m *AgentConfig) GetIdpProvider() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPrivateKey provides a mock function with given fields:
func (_m *AgentConfig) GetPrivateKey() *keypair.PrivateKey {
	ret := _m.Called()

	var r0 *keypair.PrivateKey
	if rf, ok := ret.Get(0).(func() *keypair.PrivateKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keypair.PrivateKey)
		}
	}

	return r0
}

// GetPublicKey provides a mock function with given fields:
func (_m *AgentConfig) GetPublicKey() *keypair.PublicKey {
	ret := _m.Called()

	var r0 *keypair.PublicKey
	if rf, ok := ret.Get(0).(func() *keypair.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keypair.PublicKey)
		}
	}

	return r0
}

// GetServiceUrl provides a mock function with given fields:
func (_m *AgentConfig) GetServiceUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetShutdownInfo provides a mock function with given fields:
func (_m *AgentConfig) GetShutdownInfo() (string, map[string]string) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func() map[string]string); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	return r0, r1
}

// GetTargetId provides a mock function with given fields:
func (_m *AgentConfig) GetTargetId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Reload provides a mock function with given fields:
func (_m *AgentConfig) Reload() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAgentIdentityToken provides a mock function with given fields: _a0
func (_m *AgentConfig) SetAgentIdentityToken(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetRegistrationData provides a mock function with given fields: serviceUrl, publicKey, privateKey, idpProvider, idpOrgId, targetId
func (_m *AgentConfig) SetRegistrationData(serviceUrl string, publicKey *keypair.PublicKey, privateKey *keypair.PrivateKey, idpProvider string, idpOrgId string, targetId string) error {
	ret := _m.Called(serviceUrl, publicKey, privateKey, idpProvider, idpOrgId, targetId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *keypair.PublicKey, *keypair.PrivateKey, string, string, string) error); ok {
		r0 = rf(serviceUrl, publicKey, privateKey, idpProvider, idpOrgId, targetId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetShutdownInfo provides a mock function with given fields: reason, state
func (_m *AgentConfig) SetShutdownInfo(reason string, state map[string]string) error {
	ret := _m.Called(reason, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) error); ok {
		r0 = rf(reason, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetVersion provides a mock function with given fields: version
func (_m *AgentConfig) SetVersion(version string) error {
	ret := _m.Called(version)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitForRegistration provides a mock function with given fields: ctx
func (_m *AgentConfig) WaitForRegistration(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAgentConfig interface {
	mock.TestingT
	Cleanup(func())
}

// NewAgentConfig creates a new instance of AgentConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAgentConfig(t mockConstructorTestingTNewAgentConfig) *AgentConfig {
	mock := &AgentConfig{}
	mock.Mock.Test(t)

	// t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
