// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	logger "bastionzero.com/bctl/v1/bzerolib/logger"
	mock "github.com/stretchr/testify/mock"

	registration "bastionzero.com/bctl/v1/bctl/agent/registration"
)

// IRegistration is an autogenerated mock type for the IRegistration type
type IRegistration struct {
	mock.Mock
}

// Register provides a mock function with given fields: _a0, config
func (_m *IRegistration) Register(_a0 *logger.Logger, config registration.RegistrationConfig) error {
	ret := _m.Called(_a0, config)

	var r0 error
	if rf, ok := ret.Get(0).(func(*logger.Logger, registration.RegistrationConfig) error); ok {
		r0 = rf(_a0, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIRegistration interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRegistration creates a new instance of IRegistration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRegistration(t mockConstructorTestingTNewIRegistration) *IRegistration {
	mock := &IRegistration{}
	mock.Mock.Test(t)

	// t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
