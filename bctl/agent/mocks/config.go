// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	messagesigner "bastionzero.com/bctl/v1/bzerolib/messagesigner"
	mock "github.com/stretchr/testify/mock"
)

// Config is an autogenerated mock type for the Config type
type Config struct {
	mock.Mock
}

// GetAgentIdentityToken provides a mock function with given fields:
func (_m *Config) GetAgentIdentityToken() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetIdpOrgId provides a mock function with given fields:
func (_m *Config) GetIdpOrgId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetIdpProvider provides a mock function with given fields:
func (_m *Config) GetIdpProvider() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMessageSigner provides a mock function with given fields:
func (_m *Config) GetMessageSigner() (*messagesigner.MessageSigner, error) {
	ret := _m.Called()

	var r0 *messagesigner.MessageSigner
	if rf, ok := ret.Get(0).(func() *messagesigner.MessageSigner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messagesigner.MessageSigner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateKey provides a mock function with given fields:
func (_m *Config) GetPrivateKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPublicKey provides a mock function with given fields:
func (_m *Config) GetPublicKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetServiceUrl provides a mock function with given fields:
func (_m *Config) GetServiceUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetShutdownInfo provides a mock function with given fields:
func (_m *Config) GetShutdownInfo() (string, string) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// GetTargetId provides a mock function with given fields:
func (_m *Config) GetTargetId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SaveAgentIdentityToken provides a mock function with given fields: _a0
func (_m *Config) SaveAgentIdentityToken(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetRegistrationData provides a mock function with given fields: serviceUrl, publicKey, privateKey, idpProvider, idpOrgId, targetId
func (_m *Config) SetRegistrationData(serviceUrl string, publicKey string, privateKey string, idpProvider string, idpOrgId string, targetId string) error {
	ret := _m.Called(serviceUrl, publicKey, privateKey, idpProvider, idpOrgId, targetId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) error); ok {
		r0 = rf(serviceUrl, publicKey, privateKey, idpProvider, idpOrgId, targetId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetShutdownInfo provides a mock function with given fields: reason, state
func (_m *Config) SetShutdownInfo(reason string, state string) error {
	ret := _m.Called(reason, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(reason, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetVersion provides a mock function with given fields: version
func (_m *Config) SetVersion(version string) error {
	ret := _m.Called(version)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewConfig interface {
	mock.TestingT
	Cleanup(func())
}

// NewConfig creates a new instance of Config. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConfig(t mockConstructorTestingTNewConfig) *Config {
	mock := &Config{}
	mock.Mock.Test(t)

	// t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
