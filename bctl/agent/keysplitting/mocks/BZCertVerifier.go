// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	bzcert "bastionzero.com/bctl/v1/bzerolib/keysplitting/bzcert"

	mock "github.com/stretchr/testify/mock"
)

// BZCertVerifier is an autogenerated mock type for the BZCertVerifier type
type BZCertVerifier struct {
	mock.Mock
}

// Verify provides a mock function with given fields: _a0
func (_m *BZCertVerifier) Verify(_a0 *bzcert.BZCert) (*bzcert.VerifiedBZCert, error) {
	ret := _m.Called(_a0)

	var r0 *bzcert.VerifiedBZCert
	if rf, ok := ret.Get(0).(func(*bzcert.BZCert) *bzcert.VerifiedBZCert); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bzcert.VerifiedBZCert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*bzcert.BZCert) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBZCertVerifier interface {
	mock.TestingT
	Cleanup(func())
}

// NewBZCertVerifier creates a new instance of BZCertVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBZCertVerifier(t mockConstructorTestingTNewBZCertVerifier) *BZCertVerifier {
	mock := &BZCertVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
